// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package stackparse

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type stackparseSyscallTraceT struct {
	Pid              int32
	UserStackSize    int32
	UserStack        [100]uint64
	UserStackBuildid [100]struct {
		Status  int32
		BuildId [20]uint8
		Offset  uint64
	}
}

// loadStackparse returns the embedded CollectionSpec for stackparse.
func loadStackparse() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_StackparseBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load stackparse: %w", err)
	}

	return spec, err
}

// loadStackparseObjects loads stackparse and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*stackparseObjects
//	*stackparsePrograms
//	*stackparseMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadStackparseObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadStackparse()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// stackparseSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type stackparseSpecs struct {
	stackparseProgramSpecs
	stackparseMapSpecs
}

// stackparseSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type stackparseProgramSpecs struct {
	SyscallStacktrace *ebpf.ProgramSpec `ebpf:"syscall_stacktrace"`
}

// stackparseMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type stackparseMapSpecs struct {
	SyscallTraceMap *ebpf.MapSpec `ebpf:"syscall_trace_map"`
}

// stackparseObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadStackparseObjects or ebpf.CollectionSpec.LoadAndAssign.
type stackparseObjects struct {
	stackparsePrograms
	stackparseMaps
}

func (o *stackparseObjects) Close() error {
	return _StackparseClose(
		&o.stackparsePrograms,
		&o.stackparseMaps,
	)
}

// stackparseMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadStackparseObjects or ebpf.CollectionSpec.LoadAndAssign.
type stackparseMaps struct {
	SyscallTraceMap *ebpf.Map `ebpf:"syscall_trace_map"`
}

func (m *stackparseMaps) Close() error {
	return _StackparseClose(
		m.SyscallTraceMap,
	)
}

// stackparsePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadStackparseObjects or ebpf.CollectionSpec.LoadAndAssign.
type stackparsePrograms struct {
	SyscallStacktrace *ebpf.Program `ebpf:"syscall_stacktrace"`
}

func (p *stackparsePrograms) Close() error {
	return _StackparseClose(
		p.SyscallStacktrace,
	)
}

func _StackparseClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed stackparse_x86_bpfel.o
var _StackparseBytes []byte
